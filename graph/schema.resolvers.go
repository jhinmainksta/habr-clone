package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"strconv"

	"github.com/jhinmainksta/habr-clone/graph/model"
	"github.com/jhinmainksta/habr-clone/graph/my_model"
	"github.com/markbates/going/randx"
)

// Comments is the resolver for the comments field.
func (r *commentResolver) Comments(ctx context.Context, obj *my_model.Comment, limit *int, offset *int) ([]*my_model.Comment, error) {
	if limit == nil {
		limit = &r.limit
	}

	if offset == nil {
		offset = &r.offset
	}

	return r.repo.CommentsComments(obj, *limit, *offset)
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	return r.repo.CreateUser(input)
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*model.Post, error) {
	return r.repo.CreatePost(input)
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, input model.NewComment) (*my_model.Comment, error) {

	Comment, err := r.repo.CreateComment(input)

	r.mu.Lock()
	for _, observer := range r.subs[strconv.Itoa(input.PostID)] {
		observer <- Comment
	}
	r.mu.Unlock()

	return Comment, err
}

// BlockComments is the resolver for the blockComments field.
func (r *mutationResolver) BlockComments(ctx context.Context, postID string) (*model.Post, error) {
	return r.repo.BlockComments(postID)
}

// Comments is the resolver for the comments field.
func (r *postResolver) Comments(ctx context.Context, obj *model.Post, limit *int, offset *int) ([]*my_model.Comment, error) {
	// if limit == nil {
	// 	limit = &r.limit
	// }

	// if offset == nil {
	// 	offset = &r.offset
	// }

	// return r.repo.PostsComments(obj, *limit, *offset)
	return getCommentLoader(ctx).Load(obj.ID)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	return r.repo.User(id)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	return r.repo.Users()
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context, limit *int, offset *int) ([]*model.Post, error) {
	if limit == nil {
		limit = &r.limit
	}

	if offset == nil {
		offset = &r.offset
	}

	return r.repo.Posts(*limit, *offset)
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*model.Post, error) {
	return r.repo.Post(id)
}

// Comments is the resolver for the comments field.
func (r *queryResolver) Comments(ctx context.Context, limit *int, offset *int) ([]*my_model.Comment, error) {
	if limit == nil {
		limit = &r.limit
	}

	if offset == nil {
		offset = &r.offset
	}
	return r.repo.Comments(*limit, *offset)
}

// Comment is the resolver for the comment field.
func (r *queryResolver) Comment(ctx context.Context, id string) (*my_model.Comment, error) {
	return r.repo.Comment(id)
}

// CommentAdded is the resolver for the commentAdded field.
func (r *subscriptionResolver) CommentAdded(ctx context.Context, postID string) (<-chan *my_model.Comment, error) {
	id := randx.String(8)

	commentEvents := make(chan *my_model.Comment, 1)

	go func() {
		<-ctx.Done()
		r.mu.Lock()
		delete(r.subs[postID], id)
		if len(r.subs[postID]) == 0 {
			delete(r.subs, postID)
		}
		r.mu.Unlock()
	}()

	r.mu.Lock()
	if _, ok := r.subs[postID]; !ok {
		r.subs[postID] = make(map[string]chan *my_model.Comment)
	}
	r.subs[postID][id] = commentEvents
	r.mu.Unlock()
	return commentEvents, nil

}

// Comment returns CommentResolver implementation.
func (r *Resolver) Comment() CommentResolver { return &commentResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Post returns PostResolver implementation.
func (r *Resolver) Post() PostResolver { return &postResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type commentResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
